В ООП выделяют 4 основных принципа:
  Абстракция — выделяем только те детали которых нам достаточно для представления объекта
  Инкапсуляция — принцип черного ящика, скрываем реализацию.
  Наследование — процесс, посредством которого один объект может приобретать свойства другого
  Полиморфизм — свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.

	Наследование - возможность наследовать атрибуты и методы от одного класса к дргому. Это понятие делится на 2 категории:

подкласс (дочерний) - класс, наследуемый от другого класса
суперкласс (родительский) - класс, унаследованный

Чтобы наследовать от класса, используйте extends ключевое слово, если вы не хотите, чтобы другие классы наследовали от класса, используйте ключевое слово final.

	Полиморфизм - заключается в использовании единственной сущности(метод, оператор или объект) для представления различных типов в различных сценариях использования.
Например, подумайте о вызываемом суперклассе Animal, у которого есть вызываемый метод animalSound(). Подклассами животных могут быть свиньи, кошки, собаки, птицы - и у них также есть собственная реализация звука животных:

class Animal {
  public void animalSound() {
    System.out.println("Животное издает звук ");
  }
}

class Pig extends Animal {
  public void animalSound() {
    System.out.println("Свинья : хрю-хрю");
  }
}

class Dog extends Animal {
  public void animalSound() {
    System.out.println("Собака: гав-гав");
  }
}

	Смысл инкапсуляции - убедиться, что «конфиденциальные» данные скрыты от пользователей. Для этого необходимо:
  объявить переменные / атрибуты класса как private
предоставить общедоступные методы получения и установки для   доступа и обновления значения private переменной. К private переменным можно обращаться только внутри одного и того же класса (внешний класс не имеет к нему доступа). Однако к ним можно получить доступ, если мы предоставим общедоступные методы получения и установки. get Метод возвращает значение переменного, и set устанавливает метод значения.

public class Person {
  private String name; // private = restricted access

  // Getter
  public String getName() {
    return name;
  }

  // Setter
  public void setName(String newName) {
    this.name = newName;
  }
}

Однако, поскольку name переменная объявлена ??как private, мы не можем получить к ней доступ извне этого класса и мы используем getName()и setName() методы для доступа и обновления переменной:

public class Main {
  public static void main(String[] args) {
    Person myObj = new Person();
    myObj.setName("John"); 
    System.out.println(myObj.getName());
  }
}


	Абстракция - это процесс сокрытия определенных деталей и показа пользователю только важной информации.
Абстракция может быть достигнута с помощью абстрактных классов или интерфейсов. Ключевое слово abstract является модификатором без доступа, используемый для классов и методов:
  Абстрактный класс: это ограниченный класс, который нельзя использовать для создания объектов (для доступа к нему он должен быть унаследован от другого класса).
  Абстрактный метод: может использоваться только в абстрактном классе и не имеет тела. Тело предоставляется подклассом (унаследованным от).
У абстрактного класса могут быть как абстрактные, так и обычные методы:

abstract class Animal {
  public abstract void animalSound();
  public void sleep() {
    System.out.println("Zzz");
  }
}